"""
Comb Sort
"""

def comb_sort(values: list) -> list:
    """
    Sort a list using the comb sort algorithm.

    Args:
        values (list): The list of numbers to be sorted

    Returns:
        list: The sorted list (modified in-place)

    Time Complexity: O(nÂ² / 2^p) where p is number of increments
    Space Complexity: O(1)

    Example:
        >>> comb_sort([64, 34, 25, 12, 22, 11, 90])
        [11, 12, 22, 25, 34, 64, 90]
    """
    n = len(values)
    gap = n 
    shrink = 1.3  # Shrink factor (unlike me of course...right)
    sorted = False

    while not sorted:
        # Update gap <- at last mind the gap
        gap = int(gap / shrink)
        if gap <= 1:
            gap = 1
            sorted = True

        # Compare elements with current gap <- mind it
        for i in range(n - gap):
            if values[i] > values[i + gap]:
                values[i], values[i + gap] = values[i + gap], values[i]
                sorted = False

    return values

def verify_sort(values: list) -> None:
    """
    Verify if the sorting function works correctly.

    Args:
        values (list): List of numbers to be sorted
    """
    original = values.copy()
    sorted_list = comb_sort(values)
    print(f"Original list: {original}")
    print(f"Sorted list: {sorted_list}")

if __name__ == "__main__":
    test_numbers = [64, 34, 25, 12, 22, 11, 90]
    verify_sort(test_numbers)
    
    print("\nTesting edge cases:")
    empty_list = []
    single_element = [1]
    two_elements = [2, 1]
    duplicate_elements = [3, 3, 3, 1, 2, 2]
    
    verify_sort(empty_list)
    verify_sort(single_element)
    verify_sort(two_elements)
    verify_sort(duplicate_elements)
